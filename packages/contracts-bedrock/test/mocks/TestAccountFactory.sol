// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TestAccountFactory {
    /// @notice Bytecode of TestAccount.sol
    bytes public constant INIT_CODE
        = hex"608060405234801561001057600080fd5b5061046c806100206000396000f3fe60806040526004361061002d5760003560e01c8063b61d27f614610039578063bf45c1661461006257610034565b3661003457005b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610296565b61009f565b005b34801561006e57600080fd5b5061008960048036038101906100849190610340565b610126565b60405161009691906103c3565b60405180910390f35b6000808573ffffffffffffffffffffffffffffffffffffffff168585856040516100ca92919061041d565b60006040518083038185875af1925050503d8060008114610107576040519150601f19603f3d011682016040523d82523d6000602084013e61010c565b606091505b50915091508161011e57805160208201fd5b505050505050565b60008065ffffffffffff67ffffffffffffffff16905060008067ffffffffffffffff1660001b60308367ffffffffffffffff16901b60001b63bf45c16660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916171792505050949350505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101c88261019d565b9050919050565b6101d8816101bd565b81146101e357600080fd5b50565b6000813590506101f5816101cf565b92915050565b6000819050919050565b61020e816101fb565b811461021957600080fd5b50565b60008135905061022b81610205565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261025657610255610231565b5b8235905067ffffffffffffffff81111561027357610272610236565b5b60208301915083600182028301111561028f5761028e61023b565b5b9250929050565b600080600080606085870312156102b0576102af610193565b5b60006102be878288016101e6565b94505060206102cf8782880161021c565b935050604085013567ffffffffffffffff8111156102f0576102ef610198565b5b6102fc87828801610240565b925092505092959194509250565b6000819050919050565b61031d8161030a565b811461032857600080fd5b50565b60008135905061033a81610314565b92915050565b6000806000806060858703121561035a57610359610193565b5b60006103688782880161021c565b94505060206103798782880161032b565b935050604085013567ffffffffffffffff81111561039a57610399610198565b5b6103a687828801610240565b925092505092959194509250565b6103bd8161030a565b82525050565b60006020820190506103d860008301846103b4565b92915050565b600081905092915050565b82818337600083830152505050565b600061040483856103de565b93506104118385846103e9565b82840190509392505050565b600061042a8284866103f8565b9150819050939250505056fea2646970667358221220c43fc502035bbdbe3ea3936b3811265ae13836280da8a908387fc2165b135c7164736f6c634300080f0033";
    function deploy() external payable returns (address) {
        bytes memory code = INIT_CODE;
        address newContract;
        assembly {
            let result := create2(callvalue(), add(code, 0x20), mload(code), 0)
            if iszero(result) { revert(0, 0) }
            newContract := result
        }
        return newContract;
    }
}
