// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TestAccountFactory {
    /// @notice Bytecode of TestAccount.sol
    bytes public constant INIT_CODE
        = hex"60806040526004361061002d5760003560e01c8063b61d27f614610039578063bf45c1661461006257610034565b3661003457005b600080fd5b34801561004557600080fd5b50610060600480360381019061005b919061027a565b61009f565b005b34801561006e57600080fd5b5061008960048036038101906100849190610324565b610126565b60405161009691906103a7565b60405180910390f35b6000808573ffffffffffffffffffffffffffffffffffffffff168585856040516100ca929190610401565b60006040518083038185875af1925050503d8060008114610107576040519150601f19603f3d011682016040523d82523d6000602084013e61010c565b606091505b50915091508161011e57805160208201fd5b505050505050565b60008067ffffffffffffffff9050600060608167ffffffffffffffff16901b60a08367ffffffffffffffff16901b60e063bf45c16660e01b60e01c63ffffffff16901b171792505050949350505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101ac82610181565b9050919050565b6101bc816101a1565b81146101c757600080fd5b50565b6000813590506101d9816101b3565b92915050565b6000819050919050565b6101f2816101df565b81146101fd57600080fd5b50565b60008135905061020f816101e9565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261023a57610239610215565b5b8235905067ffffffffffffffff8111156102575761025661021a565b5b6020830191508360018202830111156102735761027261021f565b5b9250929050565b6000806000806060858703121561029457610293610177565b5b60006102a2878288016101ca565b94505060206102b387828801610200565b935050604085013567ffffffffffffffff8111156102d4576102d361017c565b5b6102e087828801610224565b925092505092959194509250565b6000819050919050565b610301816102ee565b811461030c57600080fd5b50565b60008135905061031e816102f8565b92915050565b6000806000806060858703121561033e5761033d610177565b5b600061034c87828801610200565b945050602061035d8782880161030f565b935050604085013567ffffffffffffffff81111561037e5761037d61017c565b5b61038a87828801610224565b925092505092959194509250565b6103a1816101df565b82525050565b60006020820190506103bc6000830184610398565b92915050565b600081905092915050565b82818337600083830152505050565b60006103e883856103c2565b93506103f58385846103cd565b82840190509392505050565b600061040e8284866103dc565b9150819050939250505056fea2646970667358221220e4aceda8db5b686f4f4e4e30d641985e83fec51ebf22f4a53b2aa0c7bdfdf60f64736f6c634300080f0033";

    function deploy() external payable returns (address) {
        bytes memory code = INIT_CODE;
        address newContract;
        assembly {
            let result := create2(callvalue(), add(code, 0x20), mload(code), 0)
            if iszero(result) { revert(0, 0) }
            newContract := result
        }
        return newContract;
    }
}
